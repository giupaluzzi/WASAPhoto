openapi: 3.0.0

info:
  title:  WASAPhoto API
  description:  "This document describes WASAPhoto API"
  version: "1"

tags:
  - name: "login"
    description:  "Login operations"
  - name: "user"
    description: "Users operations"
  - name: "photo"
    description:  "Photos operations"

components:

  parameters:

    userid:
      name: userid
      in: path
      required: true
      description:  "Unique user identifier"
      schema:
        $ref: "#/components/schemas/User/properties/userid"

    followinguid:
      name: followinguid
      in: path
      required: true
      description:  "Unique user identifier of the user to be followed or unfollowed"
      schema:
        $ref: "#/components/schemas/User/properties/userid"

    banneduid:
      name: banneduid
      in: path
      required: true
      description:  "Unique user identifier of the user to be banned or unbanned"
      schema:
        $ref: "#/components/schemas/User/properties/userid"

    photoid:
      name: photoid
      in: path
      required: true
      description:  "Unique photo identifier of the photo to be deleted"
      schema:
        $ref: "#/components/schemas/Photo/properties/photoid"

    likeid:
      name: likeid
      in: path
      required: true
      description:  "Unique user identifier of the user who liked or unliked the photo"
      schema:
        $ref: "#/components/schemas/User/properties/userid"

    commentid:
      name: commentid
      in: path
      required: true
      description:  "Unique comment identifier"
      schema:
        $ref: "#/components/schemas/Comment/properties/commentid"

  schemas:
    Username:
      title:  Username
      description:  "Unique user identifier"
      type: string
      example: "Maria"
      pattern: "^.*?$"
      minLength: 3
      maxLength: 16

    User:
      title:  User
      description:  "This object represent a single user"
      type: object
      properties:
        userid:
          description:  "Unique user identifier"
          type: string
          example:  "Maria"
          pattern: "^.*?$"
          minLength: 3
          maxLength: 16
        following:
          description:  "List of followed userid"
          type: array
          minItems:  0
          maxItems:  9999
          items:
            $ref: "#/components/schemas/User/properties/userid"
          example:  ["XXMarioXX", "ReneFerretti"]
        followers:
          description:  "List of followers"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/User/properties/userid"
          example:  ["Glaugo", "BiascicaDaje"]
        banned:
          description:  "List of banned userid"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/User/properties/userid"
          example:  ["occhidelcuore1", "Stanis"]
        photos:
          description: "List of user's photos in reverse chronological order"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/Photo"

    Photo:
      title:  Photo
      description:  "This object represent a single photo"
      type: object
      properties:
        photoid:
          description:  "Unique photo identifier"
          type: integer
          readOnly: true
          example:  85746
        userid:
          $ref: "#/components/schemas/User/properties/userid"
        likes:
          description:  "List of userid who liked the photo"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/User/properties/userid"
          example:  ["Marcolino1","Claudione"]
        comments:
          description:  "List of comments of the photo"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            description:  "A Comment contains userid of the user who commented, photoid of the commented photo, commentid and text of the comment"
            type: object
            properties:
              userid:
                $ref: "#/components/schemas/User/properties/userid"
              photoid:
                $ref: "#/components/schemas/Photo/properties/photoid"
              commentid:
                $ref: "#/components/schemas/Comment/properties/commentid"
              commentText:
                $ref: "#/components/schemas/Comment/properties/commentText"
        date:
          description:  "Date when the photo was uploaded, with YYYY-MM-DD format"
          type: string
          format: date
          example:  "2023-12-25"
        file:
          description:  "Binary file of the photo"
          type: string
          format: binary
          minLength: 0
          maxLength: 200
          example:  "00100110"
    Comment:
      title:  Comment
      description:  "This object represents a single comment"
      type: object
      properties:
        commentid:
          description:  "Unique comment identifier"
          type: integer
          example:  78164
        userid:
          $ref: "#/components/schemas/User/properties/userid"
        commentText:
          description:  "Text of the comment"
          type: string
          minLength:  0
          maxLength:  200
          pattern: "^.*?$"
          example:  "Nice pic"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

paths:
  /session:
    post:
      tags:
        - "login"
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: "User's username"
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/User/properties/userid'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                description:  "Unique user identifier returned after the login"
                type: object
                properties:
                  userid:
                    description: "Unique user identifier"
                    type: string
                    example: "Marietto1"

  /users/{userid}:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      operationId:  getUserProfile
      tags:
        - "user"
      summary:  Get user profile
      description:  |
        Return the user's photos in reverse chronological order
        and the user's followers and following
      responses:
        "200":
          description:  "User's profile"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "206":
          description:  "Status Partial Content (Requesting user has been banned)"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "403":
          description:  "Status Forbidden (Access Denied)"
        "404":
          description:  "Status Not found (Resource doesn't exist)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

    put:
      operationId:  setMyUserName
      tags:
        - "user"
      summary:  Set user's username
      description:  |
        Set or update user's username, using the data 
        in the body of the request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/stream:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      operationId:  getMyStream
      tags:
        - "user"
      summary:  Get the user's stream
      description:  |
        Return the photo stream of the logged user. 
        It includes photos of the followed users in reverse chronological order
      responses:
        "200":
          description:  "User's stream"
          content:
            application/json:
              schema:
                description:  "Array of photos"
                type: array
                minItems: 0
                maxItems: 15
                items:
                  $ref: '#/components/schemas/Photo'
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "404":
          description:  "Status Not found (Resource doesn't exist)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/following/{followinguid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/followinguid"
    put:
      operationId:  followUser
      tags:
        - "user"
      summary:  Follow an user
      description:  |
        Follow an user with a certain userid, update followers list
        of the new user and following list of the logged in user
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []
    delete:
      operationId:  unfollowUser
      tags:
        - "user"
      summary:  Unfollow an user
      description:  |
        Unfollow an user with a certain userid, update followers list
        of the new user and following list of the logged in user
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/banned/{banneduid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/banneduid"
    put:
      operationId:  banUser
      tags:
        - "user"
      summary:  Ban an user
      description:  |
        Ban an user with a certain userid
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "403":
          description:  "Status Forbidden (Access Denied)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

    delete:
      operationId:  unbanUser
      tags:
        - "user"
      summary:  Unban an user
      description:  |
        Remove the ban on an user with given userid
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "403":
          description:  "Status Forbidden (Access Denied)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/photos/:
    parameters:
      - $ref: "#/components/parameters/userid"
    post:
      operationId:  uploadPhoto
      tags:
        - "photo"
      summary:  Upload a photo
      description:  |
        Upload a photo and associate it with given userid
      requestBody:
        required: true
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/Photo/properties/file"
      responses:
        "201":
          description:  "Photo uploaded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description:  "Status Bad Request (e.g. Wrong image type)"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/photos/{photoid}:
    parameters:
      - $ref: "#/components/parameters/photoid"
      - $ref: "#/components/parameters/userid"
    delete:
      operationId:  deletePhoto
      tags:
        - "photo"
      summary:  Delete a photo
      description:  |
        Remove a photo from user's profile
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "400":
          description:  "Status Bad Request"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/photos/{photoid}/likes/{likeid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/photoid"
      - $ref: "#/components/parameters/likeid"
    put:
      operationId:  likePhoto
      tags:
        - "photo"
      summary:  Like a photo
      description:  |
        Like a photo with given photoid
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "400":
          description:  "Status Bad Request"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []
    delete:
      operationId:  unlikePhoto
      tags:
        - "photo"
      summary:  Unlike a photo
      description:  |
        Remove a like on a photo with given photoid
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "400":
          description:  "Status Bad Request"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/photos/{photoid}/comments/:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/photoid"
    post:
      operationId:  commentPhoto
      tags:
        - "photo"
      summary:  "Comment a photo"
      description:  |
        Add  a comment to a photo with given photoid, author 
        userid and userid of the user adding the comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          description:  "Comment created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo/properties/comments'
        "400":
          description:  "Status Bad Request"
        "401":
          description:  "Status Unauthorized (User isn't logged in)"
        "403":
          description:  "Status Forbidden (Access Denied)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []

  /users/{userid}/photos/{photoid}/comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/photoid"
      - $ref: "#/components/parameters/commentid"
    delete:
      operationId:  uncommentPhoto
      tags:
        - "photo"
      summary:  Remove a comment on a photo
      description:  |
        Remove a comment on a photo, only if the action is
        performed by the author of the photo
      responses:
        "204":
          description:  "Status No content (request has success but there's no content to send)"
        "400":
          description:  "Status Bad Request"
        "401":
          description:  "Status Unauthorized (User isn't logged in or User isn't the owner of the photo)"
        "500":
          description:  "Status Internal Server Error"
      security:
        - bearerAuth: []
openapi: 3.0.0

info:
  title:  WASAPhoto API
  description:  "This document describes WASAPhoto API"
  version: "1"

tags:
  - name: "login"
    description:  "Login operations"
  - name: "user"
    description: "Users operations" 
  - name: "photo"
    description:  "Photos operations"
      
components:
  
  parameters: 
  
    userid:
      name: userid
      in: path
      required: true
      description:  "Unique user identifier"
      schema:
        $ref: "#/components/schemas/User/properties/userid"

    followinguid:
      name: followinguid
      in: path
      required: true
      description:  "Unique user identifier of the user to be followed or unfollowed"
      schema:
        $ref: "#/components/schemas/User/properties/userid"
  
    banneduid:
      name: banneduid
      in: path
      required: true
      description:  "Unique user identifier of the user to be banned or unbanned"
      schema:
        $ref: "#/components/schemas/User/properties/userid"
  
    photoid:
      name: photoid
      in: path
      required: true
      description:  "Unique photo identifier of the photo to be deleted"
      schema: 
        $ref: "#/components/schemas/Photo/properties/photoid"

    likeid:
      name: likeid
      in: path
      required: true
      description:  "Unique user identifier of the user who liked or unliked the photo"
      schema:
        $ref: "#/components/schemas/User/properties/userid"
  
    commentid:
      name: commentid
      in: path
      required: true
      description:  "Unique comment identifier"
      schema:
        $ref: "#/components/schemas/Comment/properties/commentid"

  schemas:
    Username:
      description:  "This object represent an user's username"
      type: object
      properties:
        name:
          type: string
          example:  "Maria"
          pattern: "^.*?$"
          minLength: 3
          maxLength: 16
          
    User:
      title:  User
      description:  "This object represent a single user"
      type: object
      properties:
        userid:
          description:  "Unique user identifier"
          type: integer
          readOnly: true
          example:  1234
        username:
          $ref: "#/components/schemas/Username/properties/name"
        following:
          description:  "List of followed userid"
          type: array
          minItems:  0
          maxItems:  9999
          items:
            $ref: "#/components/schemas/User/properties/userid"
          example:  [54321, 12345]
        followers:
          description:  "List of followers"
          type: array
          minItems: 0
          maxItems: 9999
          items:  
            $ref: "#/components/schemas/User/properties/userid"
          example:  [6789, 9876]
        banned:
          description:  "List of banned userid"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/User/properties/userid"
          example:  [4567, 7654]
        photos:
          description: "List of user's photos in reverse chronological order"
          type: array
          minItems: 0
          maxItems: 9999
          items:  
            $ref: "#/components/schemas/Photo"
          
    Photo:
      title:  Photo
      description:  "This object represent a single photo"
      type: object
      properties:
        photoid:  
          description:  "Unique photo identifier"
          type: integer
          readOnly: true
          example:  85746
        userid:
          $ref: "#/components/schemas/User/properties/userid"
        likes:
          description:  "List of userid who liked the photo"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/User/properties/userid"
          example:  [1234,4321,4132]
        comments:
          description:  "List of comments of the photo"
          type: array
          minItems: 0
          maxItems: 9999
          items:
            description:  "A Comment contains userid of the user who commented, photoid of the commented photo, commentid and text of the comment"
            type: object
            properties:
              userid:
                $ref: "#/components/schemas/User/properties/userid"
              photoid:
                $ref: "#/components/schemas/Photo/properties/photoid"
              commentid:
                $ref: "#/components/schemas/Comment/properties/commentid"
              commentText:
                $ref: "#/components/schemas/Comment/properties/commentText"
        date:
          description:  "Date when the photo was uploaded, with YYYY-MM-DD format"
          type: string
          format: date
          example:  "2023-12-25"
    PhotoFile:
      description: "Binary file of a photo"
      type: object
      properties:
        data:
          description:  "Data of the photo"
          type: string
          format: binary
          minLength:  0
          maxLength:  200
          example:  "00100110"
    Comment:
      title:  Comment
      description:  "This object represents a single comment"
      type: object
      properties:
        commentid:
          description:  "Unique comment identifier"
          type: integer
          example:  78164
        userid:
          $ref: "#/components/schemas/User/properties/userid"
        commentText:
          description:  "Text of the comment"
          type: string
          minLength:  0
          maxLength:  200
          pattern: "^.*?$"
          example:  "Nice pic"

  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /session:
    post:
      tags:
        - "login"
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/Username/properties/name'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: integer
                    example: 012345

  /users/{userid}:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      operationId:  getUserProfile
      tags: 
        - "user"
      summary:  Get user profile
      description:  |
        Return the user's photos in reverse chronological order
        and the user's followers and following
      responses:
        "200":
          description:  "User's profile"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        "404":
          description:  "User not found, e.g. the userid does not exist "
      security:
        - bearerAuth: []
        
  /users/{userid}/stream:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      operationId:  getMyStream
      tags: 
        - "user"
      summary:  Get the user's stream 
      description:  |
        Return the photo stream of the logged user. 
        It includes photos of the followed users in reverse chronological order
      responses:
        "200":
          description:  "User's stream"
          content:
            application/json:
              schema:
                description:  "Array of photos"
                type: array
                minItems: 0
                maxItems: 15
                items:  
                  $ref: '#/components/schemas/Photo'
        "404":
          description:  "User not found, e.g. user does not exist"
      security:
        - bearerAuth: []
        
  /users/{userid}/username:
    parameters:
      - $ref: "#/components/parameters/userid"
        
    put:
      operationId:  setMyUserName
      tags:
        - "user"
      summary:  Set user's username
      description:  |
        Set or update user's username, using the data 
        in the body of the request
      requestBody:
        content:
          application/json: 
            schema: 
              $ref: "#/components/schemas/Username"
        required: true
      responses:
        "200":
          description:  Username saved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User/properties/username"
        "400": 
          description:  bad request
      security:
        - bearerAuth: []
        
  /users/{userid}/following/{followinguid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/followinguid"
    put:
      operationId:  followUser
      tags:
        - "user"
      summary:  Follow an user
      description:  "Follow a new user with given userid and update followers list of the new user"
      responses:
        "200":
          description:  "Successfully followed the user"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description:  "Bad request, e.g. user already followed"
      security:
        - bearerAuth: []
    delete:
      operationId:  unfollowUser
      tags:
      - "user"
      summary:  Unfollow an user
      description:  "Unfollow an user with given userid"
      responses:
        "200":
          description:  "Successfully unfollowed the user"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description:  "Not found, e.g. user already unfollowed"
      security:
        - bearerAuth: []
        
  /users/{userid}/banned/{banneduid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/banneduid"
    put:
      operationId:  banUser
      tags:
        - "user"
      summary:  Ban an user
      description:  "Ban an user with given userid"
      responses:
        "200":
          description:  "Successfully banned the user"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/User"        
        "400":
          description:  "Bad request, e.g. user already banned"
      security:
        - bearerAuth: []
        
    delete:
      operationId:  unbanUser
      tags: 
      - "user"
      summary:  Unban an user
      description:  "Remove the ban on an user with given userid"
      responses:
        "200":
          description:  "Successfully unbanned an user"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description:  "Not found, e.g. user already unbanned"
      security:
        - bearerAuth: []
        
  /users/{userid}/photos/:
    parameters:
      - $ref: "#/components/parameters/userid"
    post:
      operationId:  uploadPhoto
      tags: 
        - "photo"
      summary:  Upload a photo
      description:  "Upload a photo and associate it with given userid"
      requestBody:
        required: true
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/PhotoFile"
      responses:
        "201":
          description:  "Photo uploaded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description:  "Bad request, e.g. image format not supported"
      security:
        - bearerAuth: []
        
  /users/{userid}/photos/{photoid}:
    parameters:
      - $ref: "#/components/parameters/photoid"
      - $ref: "#/components/parameters/userid"
    delete:
      operationId:  deletePhoto
      tags: 
        - "photo"
      summary:  Delete a photo
      description:  "Remove a photo from user's profile"
      responses:  
        "200":
          description:  "Photo deleted successfully"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Photo"
        "404":
          description:  "Photo not found"
      security:
        - bearerAuth: []
        
  /users/{userid}/photos/{photoid}/likes/{likeid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/photoid"
      - $ref: "#/components/parameters/likeid"    
    put:
      operationId:  likePhoto 
      tags: 
        - "photo"
      summary:  Like a photo
      description:  "Like a photo with given photoid"
      responses:
        "200":
          description:  "Successfully liked the photo"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description:  "Bad request, e.g. photo already liked"
      security:
        - bearerAuth: []
    delete:
      operationId:  unlikePhoto
      tags: 
        - "photo"
      summary:  Unlike a photo
      description:  "Remove a like on a photo with given photoid"
      responses:
        "200":
          description:  "Successfully unliked the photo"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Photo"
        "404":
          description:  "Not found, e.g. photo removed from the system"
      security:
        - bearerAuth: []
        
  /users/{userid}/photos/{photoid}/comments/:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/photoid"
    post:
      operationId:  commentPhoto
      tags: 
        - "photo"
      summary:  "Comment a photo"
      description:  "Add  a comment to a photo with given photoid, author userid and userid of the user adding the comment. "
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          description:  "Comment created successfully"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Photo/properties/comments'
        "404":
          description:  "Not found, e.g. the photo does not exist"
      security:
        - bearerAuth: []
        
  /users/{userid}/photos/{photoid}/comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/photoid"
      - $ref: "#/components/parameters/commentid"
    delete:
      operationId:  uncommentPhoto
      tags: 
        - "photo"
      summary:  Remove a comment on a photo
      description:  "Remove a comment on a photo, only if the action is performed by the author of the photo"
      responses:
        "200":
          description:  "Comment successfully deleted"
          content:
            application/json: 
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description:  "Not found, e.g. comment already removed"
      security:
        - bearerAuth: []